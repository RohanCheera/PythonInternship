import hashlib
import json
import pandas as pd
import tkinter as tk
from tkinter import ttk
from tkinter import simpledialog
from tkinter import messagebox

class UserAuthentication:
    def __init__(self, filename='user_data.txt'):
        self.filename = filename
        self.load_user_data()
        self.current_user = None
        self.current_todo_list = None

    def load_user_data(self):
        try:
            with open(self.filename, 'r') as file:
                self.user_data = json.load(file)
        except FileNotFoundError:
            self.user_data = {}

    def save_user_data(self):
        with open(self.filename, 'w') as file:
            json.dump(self.user_data, file)

    def register_user(self, username, password):
        if username not in self.user_data:
            hashed_password = hashlib.sha256(password.encode()).hexdigest()
            self.user_data[username] = {'password': hashed_password, 'todo_list': []}
            self.save_user_data()
            print(f'User "{username}" registered successfully.')
        else:
            print(f'Error: User "{username}" already exists.')

    def authenticate_user(self, username, password):
        if username in self.user_data and self.user_data[username]['password'] == hashlib.sha256(password.encode()).hexdigest():
            self.current_user = username
            self.current_todo_list = TodoList(self.user_data[username]['todo_list'])
            print('Login successful!')
            return True
        else:
            print('Login failed. Please check your username and password.')
            return False

    def save_todo_list(self):
        if self.current_user:
            self.user_data[self.current_user]['todo_list'] = self.current_todo_list.tasks
            self.save_user_data()
            print('To-do list saved.')

class TodoList:
    def __init__(self, tasks=None):
        self.tasks = tasks if tasks is not None else []

    def add_task(self, title, description):
        task = {'title': title, 'description': description, 'status': 'incomplete'}
        self.tasks.append(task)
        print(f'Task "{title}" added.')


    def view_tasks(self, frame):
        for widget in frame.winfo_children():
            widget.destroy()

        if not self.tasks:
            label = ttk.Label(frame, text='No tasks.')
            label.grid(row=0, column=0, sticky="w")
        else:
            header = f'S.No.{" ":4}Title{" ":15}Description{" ":25}Status'
            label_header = ttk.Label(frame, text=header)
            label_header.grid(row=0, column=0, sticky="w")

            for i, task in enumerate(self.tasks, start=1):
                row_text = f'{i}.{" ":4}{task["title"][:15]:<15}{task["description"][:25]:<25}{task["status"]}'
                label = ttk.Label(frame, text=row_text)
                label.grid(row=i, column=0, sticky="w")

                edit_button = ttk.Button(frame, text='Edit', command=lambda index=i: self.edit_task(index))
                edit_button.grid(row=i, column=1, padx=5)

                delete_button = ttk.Button(frame, text='Delete', command=lambda index=i: self.remove_task(index))
                delete_button.grid(row=i, column=2, padx=5)


    def remove_task(self, task_index):
        if 1 <= task_index <= len(self.tasks):
            removed_task = self.tasks.pop(task_index - 1)
            print(f'Task "{removed_task["title"]}" removed.')
        else:
            print('Invalid task index.')

    def edit_task(self, task_index):
        if 1 <= task_index <= len(self.tasks):
            task = self.tasks[task_index - 1]
            new_description = simpledialog.askstring("Edit Description", "Enter the new task description:", initialvalue=task['description'])
            if new_description is not None:
                task['description'] = new_description

            new_status = simpledialog.askstring("Edit Status", "Enter the new task status:", initialvalue=task['status'])
            if new_status is not None:
                task['status'] = new_status

            print(f'Task edited: {task}')
        else:
            print('Invalid task index.')

class TodoListApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Todo List App")

        self.auth_system = UserAuthentication()

        self.create_widgets()

    def create_widgets(self):
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(expand=True, fill="both")

        self.login_frame = ttk.Frame(self.notebook)
        self.register_frame = ttk.Frame(self.notebook)
        self.todo_frame = ttk.Frame(self.notebook)

        self.notebook.add(self.login_frame, text="Login")
        self.notebook.add(self.register_frame, text="Register")
        self.notebook.add(self.todo_frame, text="Todo List")

        self.create_login_frame()
        self.create_register_frame()
        self.create_todo_frame()

    def create_login_frame(self):
        label_username = ttk.Label(self.login_frame, text="Username:")
        label_password = ttk.Label(self.login_frame, text="Password:")

        self.entry_username = ttk.Entry(self.login_frame)
        self.entry_password = ttk.Entry(self.login_frame, show="*")

        button_login = ttk.Button(self.login_frame, text="Login", command=self.login)

        label_username.grid(row=0, column=0, pady=5, padx=5, sticky="e")
        label_password.grid(row=1, column=0, pady=5, padx=5, sticky="e")
        self.entry_username.grid(row=0, column=1, pady=5, padx=5, sticky="w")
        self.entry_password.grid(row=1, column=1, pady=5, padx=5, sticky="w")
        button_login.grid(row=2, column=1, pady=10)

    def create_register_frame(self):
        label_username = ttk.Label(self.register_frame, text="Username:")
        label_password = ttk.Label(self.register_frame, text="Password:")

        self.entry_register_username = ttk.Entry(self.register_frame)
        self.entry_register_password = ttk.Entry(self.register_frame, show="*")

        button_register = ttk.Button(self.register_frame, text="Register", command=self.register)

        label_username.grid(row=0, column=0, pady=5, padx=5, sticky="e")
        label_password.grid(row=1, column=0, pady=5, padx=5, sticky="e")
        self.entry_register_username.grid(row=0, column=1, pady=5, padx=5, sticky="w")
        self.entry_register_password.grid(row=1, column=1, pady=5, padx=5, sticky="w")
        button_register.grid(row=2, column=1, pady=10)

    def create_todo_frame(self):
        self.label_task_title = ttk.Label(self.todo_frame, text="Task Title:")
        self.label_task_description = ttk.Label(self.todo_frame, text="Task Description:")

        self.entry_task_title = ttk.Entry(self.todo_frame)
        self.entry_task_description = ttk.Entry(self.todo_frame)

        self.button_add_task = ttk.Button(self.todo_frame, text="Add Task", command=self.add_task)
        self.button_logout = ttk.Button(self.todo_frame, text="Logout", command=self.logout)
        self.todo_list_frame = ttk.Frame(self.todo_frame)

        self.label_task_title.grid(row=0, column=0, pady=5, padx=5, sticky="e")
        self.label_task_description.grid(row=1, column=0, pady=5, padx=5, sticky="e")
        self.entry_task_title.grid(row=0, column=1, pady=5, padx=5, sticky="w")
        self.entry_task_description.grid(row=1, column=1, pady=5, padx=5, sticky="w")
        self.button_add_task.grid(row=2, column=1, pady=5)
        self.button_logout.grid(row=0, column=2, pady=5)
        self.todo_list_frame.grid(row=3, column=0, columnspan=3)
        self.button_refresh = ttk.Button(self.todo_frame, text="Refresh", command=self.refresh_todo_list)
        self.button_refresh.grid(row=2, column=2, pady=5)

    def refresh_todo_list(self):
        if self.auth_system.current_user:
            self.update_todo_list_frame()

    def login(self):
        username = self.entry_username.get()
        password = self.entry_password.get()

        if self.auth_system.authenticate_user(username, password):
            self.update_todo_list_frame()
            self.notebook.select(self.todo_frame)

    def register(self):
        username = self.entry_register_username.get()
        password = self.entry_register_password.get()

        self.auth_system.register_user(username, password)

    def add_task(self):
        title = self.entry_task_title.get()
        description = self.entry_task_description.get()

        if self.auth_system.current_user:
            self.auth_system.current_todo_list.add_task(title, description)
            self.clear_task_entries()
            self.update_todo_list_frame()

    def logout(self):
        self.auth_system.save_todo_list()
        self.auth_system.current_user = None
        self.auth_system.current_todo_list = None
        self.notebook.select(self.login_frame)

    def clear_task_entries(self):
        self.entry_task_title.delete(0, tk.END)
        self.entry_task_description.delete(0, tk.END)

    def update_todo_list_frame(self):
        self.auth_system.current_todo_list.view_tasks(self.todo_list_frame)

if __name__ == "__main__":
    root = tk.Tk()
    app = TodoListApp(root)
    root.mainloop()
